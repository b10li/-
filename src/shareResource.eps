/*--------------------------------------------------
1. 자원/ 인구 공유 
이전의 값에 변화율을 모두 더함 (현재값 - 과거값 = 변화율) 
current - past = changed amount

공유된 자원값 = 이전값 + P1 변화율 + P2 변화율 + ... + P5 변화율
= P1 ~ P5 현재값 - P1 ~ P5 과거값+ 팀 과거값
(공유시, 팀 과거값 == 과거값)
share amount = past + all changed amount = past + all current - all past

플레이어 수가 n 일때,
공유된 자원량 = (n)현재값 - (n)과거값 + 과거값
if player number is n,
shared amount = current*n - past*n + past

----------------------------------------------------*/
import shareTeam;

function GetResource(playerID)
{// 이상없음
	const ore = dwread_epd(EPD(0x57F0F0) + playerID);
	const gas = dwread_epd(EPD(0x57F120) + playerID);

	return ore, gas;
}

function GetSharedResource(teamID)
{// 공유된 자원 구함
	const team = shareTeam.GetSharedTeam(teamID);

	var totalOre = 0;
	var totalGas = 0;
	var playerNumber = 0;

	for(var p=0; p<6; p++)
	{
		if(!playerexist(p)) continue;
		if(shareTeam.IsTeammate(p, teamID))
		{
			const o, g = GetResource(p);
			totalOre = o + totalOre;
			totalGas = g + totalGas;
			playerNumber++;
		}
	}
	const pastOre = team.ore;
	const pastGas = team.gas; 

	const sharedOre = totalOre - pastOre* (playerNumber - 1) ;
	const sharedGas = totalGas - pastGas* (playerNumber - 1) ;

	return sharedOre, sharedGas;
}

function SetSharedResource(teamID)
{//
	const team = shareTeam.GetSharedTeam(teamID);

	const sharedOre, sharedGas = GetSharedResource(teamID);
	//저장
	team.ore = sharedOre;
	team.gas = sharedGas;

	for(var p=0; p<6; p++)
	{
		if(!playerexist(p)) continue;
		if(shareTeam.IsTeammate(p, teamID))
		{
			SetResources(p, SetTo, sharedOre, Ore);
			SetResources(p, SetTo, sharedGas, Gas);
		}
	}
}
function IsDifferResource(playerID, teamID)
{
	//const teamID = TeamDivide[playerID];
	const team = shareTeam.GetSharedTeam(teamID);

	if(shareTeam.IsTeammate(playerID, teamID))
	{
		var pOre, pGas = GetResource(playerID);
		if(team.ore != pOre || team.gas != pGas)
		{
			SetSharedResource(teamID);
		}
	}
}
