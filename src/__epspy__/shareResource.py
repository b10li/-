## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 17) import shareTeam;
import shareTeam
# (Line 19) function GetResource(playerID)
# (Line 20) {// 이상없음
@EUDFunc
def GetResource(playerID):
    # (Line 21) const ore = dwread_epd(EPD(0x57F0F0) + playerID);
    ore = f_dwread_epd(EPD(0x57F0F0) + playerID)
    # (Line 22) const gas = dwread_epd(EPD(0x57F120) + playerID);
    gas = f_dwread_epd(EPD(0x57F120) + playerID)
    # (Line 24) return ore, gas;
    EUDReturn(ore, gas)
    # (Line 25) }
    # (Line 27) function GetSharedResource(teamID)

# (Line 28) {// 공유된 자원 구함
@EUDFunc
def GetSharedResource(teamID):
    # (Line 29) const team = shareTeam.GetSharedTeam(teamID);
    team = shareTeam.GetSharedTeam(teamID)
    # (Line 31) var totalOre = 0;
    totalOre = EUDVariable()
    totalOre << (0)
    # (Line 32) var totalGas = 0;
    totalGas = EUDVariable()
    totalGas << (0)
    # (Line 33) var playerNumber = 0;
    playerNumber = EUDVariable()
    playerNumber << (0)
    # (Line 35) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 36) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 38) if(shareTeam.IsTeammate(p, teamID))
    if EUDIf()(shareTeam.IsTeammate(p, teamID)):
        # (Line 39) {
        # (Line 40) const o, g = GetResource(p);
        o, g = List2Assignable([GetResource(p)])
        # (Line 41) totalOre = o + totalOre;
        totalOre << (o + totalOre)
        # (Line 42) totalGas = g + totalGas;
        totalGas << (g + totalGas)
        # (Line 43) playerNumber++;
        playerNumber.__iadd__(1)
        # (Line 44) }
        # (Line 45) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 47) const pastOre = team.ore;
    pastOre = team.ore
    # (Line 48) const pastGas = team.gas;
    pastGas = team.gas
    # (Line 50) const sharedOre = totalOre - pastOre* (playerNumber - 1) ;
    sharedOre = totalOre - pastOre * (playerNumber - 1)
    # (Line 51) const sharedGas = totalGas - pastGas* (playerNumber - 1) ;
    sharedGas = totalGas - pastGas * (playerNumber - 1)
    # (Line 53) return sharedOre, sharedGas;
    EUDReturn(sharedOre, sharedGas)
    # (Line 54) }
    # (Line 56) function SetSharedResource(teamID)

# (Line 57) {//
@EUDFunc
def SetSharedResource(teamID):
    # (Line 58) const team = shareTeam.GetSharedTeam(teamID);
    team = shareTeam.GetSharedTeam(teamID)
    # (Line 60) const sharedOre, sharedGas = GetSharedResource(teamID);
    sharedOre, sharedGas = List2Assignable([GetSharedResource(teamID)])
    # (Line 62) team.ore = sharedOre;
    _ATTW(team, 'ore') << (sharedOre)
    # (Line 63) team.gas = sharedGas;
    _ATTW(team, 'gas') << (sharedGas)
    # (Line 65) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 66) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 68) if(shareTeam.IsTeammate(p, teamID))
    if EUDIf()(shareTeam.IsTeammate(p, teamID)):
        # (Line 69) {
        # (Line 70) SetResources(p, SetTo, sharedOre, Ore);
        DoActions(SetResources(p, SetTo, sharedOre, Ore))
        # (Line 71) SetResources(p, SetTo, sharedGas, Gas);
        DoActions(SetResources(p, SetTo, sharedGas, Gas))
        # (Line 72) }
        # (Line 73) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 74) }
    # (Line 75) function IsDifferResource(playerID, teamID)

# (Line 76) {
@EUDFunc
def IsDifferResource(playerID, teamID):
    # (Line 78) const team = shareTeam.GetSharedTeam(teamID);
    team = shareTeam.GetSharedTeam(teamID)
    # (Line 80) if(shareTeam.IsTeammate(playerID, teamID))
    if EUDIf()(shareTeam.IsTeammate(playerID, teamID)):
        # (Line 81) {
        # (Line 82) var pOre, pGas = GetResource(playerID);
        pOre, pGas = _MVAR([GetResource(playerID)])
        # (Line 83) if(team.ore != pOre || team.gas != pGas)
        if EUDIf()(EUDSCOr()(team.ore == pOre, neg=True)(team.gas == pGas, neg=True)()):
            # (Line 84) {
            # (Line 85) SetSharedResource(teamID);
            SetSharedResource(teamID)
            # (Line 86) }
            # (Line 88) }
        EUDEndIf()
        # (Line 89) }
    EUDEndIf()
