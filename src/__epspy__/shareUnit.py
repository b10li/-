## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 9) import shareTeam;
import shareTeam
# (Line 11) const locationDot = $L("Location A");
locationDot = _CGFW(lambda: [GetLocationIndex("Location A")], 1)[0]
# (Line 14) function GetSelectedUnitEPD(playerID)
# (Line 15) {
@EUDFunc
def GetSelectedUnitEPD(playerID):
    # (Line 17) const unitPtr, unitEpd = dwepdread_epd_safe(EPD(0x6284E8) + 12* playerID);
    unitPtr, unitEpd = List2Assignable([f_dwepdread_epd_safe(EPD(0x6284E8) + 12 * playerID)])
    # (Line 19) if (unitPtr != 0)
    if EUDIf()(unitPtr == 0, neg=True):
        # (Line 20) return unitEpd;
        EUDReturn(unitEpd)
        # (Line 21) else
        # (Line 22) return -1;
    if EUDElse()():
        EUDReturn(-1)
        # (Line 23) }
    EUDEndIf()
    # (Line 25) function SetLocationXY(posX, posY, locationNum, size)

# (Line 26) {// 로케이션을 해당xy로 옮김
@EUDFunc
def SetLocationXY(posX, posY, locationNum, size):
    # (Line 27) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 0, SetTo, posX - size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 0, SetTo, posX - size))
    # (Line 28) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 1, SetTo, posY - size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 1, SetTo, posY - size))
    # (Line 29) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 2, SetTo, posX + size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 2, SetTo, posX + size))
    # (Line 30) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 3, SetTo, posY + size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 3, SetTo, posY + size))
    # (Line 31) }
    # (Line 33) function isUnit(unitType)

# (Line 34) {
@EUDFunc
def f_isUnit(unitType):
    # (Line 35) if(	unitType < 104
    _t1 = EUDIf()
    # (Line 36) && unitType != 35 // larva
    # (Line 37) && unitType != 36 // egg
    # (Line 38) && unitType != 59 // cocoon
    # (Line 39) && unitType != 73 // intercepter
    # (Line 40) && unitType != 85 // scarb
    # (Line 41) && unitType != 97 // lurker egg
    # (Line 42) || unitType == 107 // scaner sweep
    # (Line 43) )
    if _t1(EUDSCOr()(EUDSCAnd()(unitType >= 104, neg=True)(unitType == 35, neg=True)(unitType == 36, neg=True)(unitType == 59, neg=True)(unitType == 73, neg=True)(unitType == 85, neg=True)(unitType == 97, neg=True)())(unitType == 107)()):
        # (Line 44) {
        # (Line 45) return 1;
        EUDReturn(1)
        # (Line 46) }
        # (Line 47) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 48) }
    EUDEndIf()
    # (Line 50) function isNonBattleUnit(unitType)

# (Line 51) {
@EUDFunc
def f_isNonBattleUnit(unitType):
    # (Line 52) if(	unitType == 7	//scv
    _t1 = EUDIf()
    # (Line 53) && unitType == 11 //dropship
    # (Line 54) && unitType == 41 //drone
    # (Line 55) && unitType == 42 //overlord
    # (Line 56) && unitType == 64 //probe
    # (Line 57) && unitType == 69 //shuttle
    # (Line 58) && unitType != 107
    # (Line 59) )
    if _t1(EUDSCAnd()(unitType == 7)(unitType == 11)(unitType == 41)(unitType == 42)(unitType == 64)(unitType == 69)(unitType == 107, neg=True)()):
        # (Line 60) {
        # (Line 61) return 1;
        EUDReturn(1)
        # (Line 62) }
        # (Line 63) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 64) }
    EUDEndIf()
    # (Line 66) function GiveSelectedUnit(playerID)

# (Line 67) {
@EUDFunc
def GiveSelectedUnit(playerID):
    # (Line 68) const unitEpd = GetSelectedUnitEPD(playerID);
    unitEpd = GetSelectedUnitEPD(playerID)
    # (Line 70) if(unitEpd != -1)
    if EUDIf()(unitEpd == -1, neg=True):
        # (Line 71) {
        # (Line 72) const unitType = dwread_epd(unitEpd + 0x64 /4);
        unitType = f_dwread_epd(unitEpd + 0x64 // 4)
        # (Line 73) if(isUnit(unitType))
        if EUDIf()(f_isUnit(unitType)):
            # (Line 74) {
            # (Line 75) const teamID = shareTeam.TeamDivide[playerID];
            teamID = shareTeam.TeamDivide[playerID]
            # (Line 76) const player = dwbreak(dwread_epd(unitEpd + 0x4C /4))[[2]];
            player = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[2]
            # (Line 78) if((player != playerID) && shareTeam.IsTeammate(player, teamID))
            if EUDIf()(EUDSCAnd()((EUDNot(player == playerID)))(shareTeam.IsTeammate(player, teamID))()):
                # (Line 79) {
                # (Line 80) const unitX, unitY = dwbreak(dwread_epd(unitEpd + 0x28 /4))[[0, 1]];
                unitX, unitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(unitEpd + 0x28 // 4)), [0, 1])])
                # (Line 81) if(isNonBattleUnit(unitType))
                if EUDIf()(f_isNonBattleUnit(unitType)):
                    # (Line 82) {//battle unit = give multiple
                    # (Line 83) SetLocationXY(unitX, unitY, locationDot, 32*20);
                    SetLocationXY(unitX, unitY, locationDot, 32 * 20)
                    # (Line 84) GiveUnits(All, unitType, player, locationDot+1, playerID);
                    DoActions(GiveUnits(All, unitType, player, locationDot + 1, playerID))
                    # (Line 85) }
                    # (Line 86) else
                    # (Line 87) {//transport, worker unit = give 1
                if EUDElse()():
                    # (Line 88) SetLocationXY(unitX, unitY, locationDot, 0);
                    SetLocationXY(unitX, unitY, locationDot, 0)
                    # (Line 89) GiveUnits(1, unitType, player, locationDot+1, playerID);
                    DoActions(GiveUnits(1, unitType, player, locationDot + 1, playerID))
                    # (Line 90) }
                    # (Line 91) }
                EUDEndIf()
                # (Line 92) }
            EUDEndIf()
            # (Line 93) }
        EUDEndIf()
        # (Line 94) }
    EUDEndIf()
