## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 8) import shareTeam;
import shareTeam
# (Line 10) const TECHNUMBER			= 35;
TECHNUMBER = _CGFW(lambda: [35], 1)[0]
# (Line 11) const TeamTechCheck			= EUDArray(shareTeam.TeamNumber* TECHNUMBER);
TeamTechCheck = _CGFW(lambda: [EUDArray(shareTeam.TeamNumber * TECHNUMBER)], 1)[0]
# (Line 13) function GetCurrentTech(player, tech)
# (Line 14) {
@EUDFunc
def GetCurrentTech(player, tech):
    # (Line 15) const count = bread(0x58CF44 + tech + player * (24 - 4 * (tech / 24)) + 0x21FC * (tech / 24));
    count = f_bread(0x58CF44 + tech + player * (24 - 4 * (tech // 24)) + 0x21FC * (tech // 24))
    # (Line 16) return count;
    EUDReturn(count)
    # (Line 17) }
    # (Line 19) function SetCurrentTech(player, tech, count)

# (Line 20) {
@EUDFunc
def SetCurrentTech(player, tech, count):
    # (Line 21) bwrite(0x58CF44 + tech + player * (24 - 4 * (tech / 24)) + 0x21FC * (tech / 24), count);
    f_bwrite(0x58CF44 + tech + player * (24 - 4 * (tech // 24)) + 0x21FC * (tech // 24), count)
    # (Line 22) }
    # (Line 25) function GetSharedTech(teamID, techNumber)

# (Line 26) {//Get P1, P4 tech(생산자가 업글하니까)
@EUDFunc
def GetSharedTech(teamID, techNumber):
    # (Line 27) const techVal = GetCurrentTech(teamID*shareTeam.TeamManNumber, techNumber);
    techVal = GetCurrentTech(teamID * shareTeam.TeamManNumber, techNumber)
    # (Line 28) return techVal;
    EUDReturn(techVal)
    # (Line 29) }
    # (Line 31) function SetSharedTech(teamID)

# (Line 32) {
@EUDFunc
def SetSharedTech(teamID):
    # (Line 33) for(var j=1; j<shareTeam.TeamManNumber; j++)
    j = EUDVariable()
    j << (1)
    if EUDWhile()(j >= shareTeam.TeamManNumber, neg=True):
        def _t2():
            j.__iadd__(1)
        # (Line 34) {//p2~p3, p5~p6
        # (Line 35) for(var i=0; i<TECHNUMBER; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= TECHNUMBER, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 36) {// 1~ end
            # (Line 38) const savedTechLevel = TeamTechCheck[i+ TECHNUMBER*teamID];
            savedTechLevel = TeamTechCheck[i + TECHNUMBER * teamID]
            # (Line 40) const teamTechLevel = GetSharedTech(teamID, i);
            teamTechLevel = GetSharedTech(teamID, i)
            # (Line 41) if(savedTechLevel != teamTechLevel)
            if EUDIf()(savedTechLevel == teamTechLevel, neg=True):
                # (Line 42) {
                # (Line 44) SetCurrentTech(teamID*shareTeam.TeamManNumber+j, i, teamTechLevel);
                SetCurrentTech(teamID * shareTeam.TeamManNumber + j, i, teamTechLevel)
                # (Line 45) TeamTechCheck[i+ TECHNUMBER*teamID] = teamTechLevel;
                _ARRW(TeamTechCheck, i + TECHNUMBER * teamID) << (teamTechLevel)
                # (Line 46) }
                # (Line 48) }
            EUDEndIf()
            # (Line 49) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 50) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
