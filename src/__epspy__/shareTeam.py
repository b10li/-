## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 18) const TeamNumber 			= 2; // 팀수
TeamNumber = _CGFW(lambda: [2], 1)[0]
# (Line 19) const TeamManNumber			= 3; // 팀당 인원수
TeamManNumber = _CGFW(lambda: [3], 1)[0]
# (Line 26) const TeamInfoList			= EUDArray(TeamNumber);
TeamInfoList = _CGFW(lambda: [EUDArray(TeamNumber)], 1)[0]
# (Line 28) const TeamDivide			= [9,9,9,9, 9,9,9,9, 9,9,9,9];
TeamDivide = _CGFW(lambda: [_ARR(FlattenList([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]))], 1)[0]
# (Line 30) object TeamInfo
# (Line 31) {
# (Line 32) var ore;
class TeamInfo(EUDStruct):
    # (Line 33) var gas;
    # (Line 34) var race; // 1 zerg, 2 terran, 3 protoss
    # (Line 35) var suppliesUsed;
    # (Line 36) var suppliesAvail;
    # (Line 37) };
    # (Line 39) function GetSharedTeam(teamID): TeamInfo
    _fields_ = [
        'ore',
        'gas',
        'race',
        'suppliesUsed',
        'suppliesAvail',
    ]

# (Line 40) {
@EUDTypedFunc([None], [TeamInfo])
def GetSharedTeam(teamID):
    # (Line 41) return TeamInfoList[teamID];
    EUDReturn(TeamInfoList[teamID])
    # (Line 42) }
    # (Line 44) function SetSharedTeam(teamID, newVal: TeamInfo)

# (Line 45) {
@EUDTypedFunc([None, TeamInfo])
def SetSharedTeam(teamID, newVal):
    # (Line 46) if(TeamInfoList[teamID])
    if EUDIf()(TeamInfoList[teamID]):
        # (Line 47) {
        # (Line 48) TeamInfo.free(TeamInfoList[teamID]);
        TeamInfo.free(TeamInfoList[teamID])
        # (Line 49) }
        # (Line 50) TeamInfoList[teamID] = newVal;
    EUDEndIf()
    _ARRW(TeamInfoList, teamID) << (newVal)
    # (Line 51) }
    # (Line 54) function IsTeammate(playerID, teamID)

# (Line 55) {
@EUDFunc
def IsTeammate(playerID, teamID):
    # (Line 56) if(teamID == TeamDivide[playerID])
    if EUDIf()(teamID == TeamDivide[playerID]):
        # (Line 57) return 1;
        EUDReturn(1)
        # (Line 58) else
        # (Line 59) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 60) }
    EUDEndIf()
    # (Line 62) function SetTeam(teamID, race)

# (Line 63) {
@EUDFunc
def SetTeam(teamID, race):
    # (Line 64) const team 			= TeamInfo.alloc();
    team = TeamInfo.alloc()
    # (Line 65) for(var i=0; i<TeamManNumber; i++){
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= TeamManNumber, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 66) TeamDivide[teamID*TeamManNumber + i] = teamID; // P1~P3을 팀 (teamID)으로
        _ARRW(TeamDivide, teamID * TeamManNumber + i) << (teamID)
        # (Line 67) }
        # (Line 68) team.ore 			= 0;
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    _ATTW(team, 'ore') << (0)
    # (Line 69) team.gas 			= 0;
    _ATTW(team, 'gas') << (0)
    # (Line 70) team.race 			= race; // 1 zerg, 2 terran, 3 protoss
    _ATTW(team, 'race') << (race)
    # (Line 71) team.suppliesUsed 	= 0;
    _ATTW(team, 'suppliesUsed') << (0)
    # (Line 72) team.suppliesAvail	= 0;
    _ATTW(team, 'suppliesAvail') << (0)
    # (Line 74) SetSharedTeam(teamID, team);
    SetSharedTeam(teamID, team)
    # (Line 75) }
