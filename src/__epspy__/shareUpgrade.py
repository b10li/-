## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 8) import shareTeam;
import shareTeam
# (Line 9) const UPGRADENUMBER 		= 55;
UPGRADENUMBER = _CGFW(lambda: [55], 1)[0]
# (Line 10) const TeamUpgradeCheck		= EUDArray(shareTeam.TeamNumber* UPGRADENUMBER);
TeamUpgradeCheck = _CGFW(lambda: [EUDArray(shareTeam.TeamNumber * UPGRADENUMBER)], 1)[0]
# (Line 12) function GetCurrentUpgrade(player, upgrade)
# (Line 13) {//현재 업그레이드 수치를 반환
@EUDFunc
def GetCurrentUpgrade(player, upgrade):
    # (Line 14) const count = bread(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade / 46)) + 0x207C * (upgrade / 46));
    count = f_bread(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade // 46)) + 0x207C * (upgrade // 46))
    # (Line 15) return count;
    EUDReturn(count)
    # (Line 17) }
    # (Line 19) function SetCurrentUpgrade(player, upgrade, count)

# (Line 20) {//업그레이드 설정
@EUDFunc
def SetCurrentUpgrade(player, upgrade, count):
    # (Line 22) bwrite(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade / 46)) + 0x207C * (upgrade / 46), count);
    f_bwrite(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade // 46)) + 0x207C * (upgrade // 46), count)
    # (Line 23) }
    # (Line 26) function GetSharedUpgrade(teamID, upgradeNumber)

# (Line 27) {// 업그레이드 연동
@EUDFunc
def GetSharedUpgrade(teamID, upgradeNumber):
    # (Line 30) const upgradeVal = GetCurrentUpgrade(teamID*shareTeam.TeamManNumber, upgradeNumber);
    upgradeVal = GetCurrentUpgrade(teamID * shareTeam.TeamManNumber, upgradeNumber)
    # (Line 31) return upgradeVal;
    EUDReturn(upgradeVal)
    # (Line 32) }
    # (Line 34) function SetSharedUpgrade(teamID)

# (Line 35) {
@EUDFunc
def SetSharedUpgrade(teamID):
    # (Line 36) for(var j=1; j<shareTeam.TeamManNumber; j++)
    j = EUDVariable()
    j << (1)
    if EUDWhile()(j >= shareTeam.TeamManNumber, neg=True):
        def _t2():
            j.__iadd__(1)
        # (Line 37) {//p2~p3, p5~p6
        # (Line 38) for(var i=0; i<UPGRADENUMBER; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= UPGRADENUMBER, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 39) {//1~ end
            # (Line 41) const savedUpgradeLevel = TeamUpgradeCheck[i+ UPGRADENUMBER*teamID];
            savedUpgradeLevel = TeamUpgradeCheck[i + UPGRADENUMBER * teamID]
            # (Line 43) if(savedUpgradeLevel == 1 && i > 16){
            if EUDIf()(EUDSCAnd()(savedUpgradeLevel == 1)(i <= 16, neg=True)()):
                # (Line 44) return;
                EUDReturn()
                # (Line 45) }
                # (Line 47) else
                # (Line 48) {
            if EUDElse()():
                # (Line 50) const teamUpgradeLevel = GetSharedUpgrade(teamID, i);
                teamUpgradeLevel = GetSharedUpgrade(teamID, i)
                # (Line 51) if(savedUpgradeLevel != teamUpgradeLevel)
                if EUDIf()(savedUpgradeLevel == teamUpgradeLevel, neg=True):
                    # (Line 52) {
                    # (Line 54) SetCurrentUpgrade(teamID*shareTeam.TeamManNumber+j, i, teamUpgradeLevel);
                    SetCurrentUpgrade(teamID * shareTeam.TeamManNumber + j, i, teamUpgradeLevel)
                    # (Line 55) TeamUpgradeCheck[i+ UPGRADENUMBER*teamID] = teamUpgradeLevel;
                    _ARRW(TeamUpgradeCheck, i + UPGRADENUMBER * teamID) << (teamUpgradeLevel)
                    # (Line 56) }
                    # (Line 57) }
                EUDEndIf()
                # (Line 58) }
            EUDEndIf()
            # (Line 59) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 60) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
