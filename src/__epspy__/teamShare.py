## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 18) const locationDot = $L("Location A");
locationDot = _CGFW(lambda: [GetLocationIndex("Location A")], 1)[0]
# (Line 20) const TeamNumber 			= 2; // 팀수
TeamNumber = _CGFW(lambda: [2], 1)[0]
# (Line 21) const TeamManNumber			= 3; // 팀당 인원수
TeamManNumber = _CGFW(lambda: [3], 1)[0]
# (Line 24) function ShowText()
# (Line 25) {
@EUDFunc
def ShowText():
    # (Line 26) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 27) SetMissionObjectives('\x0610li\x01: 자원, 인구, 업글, 테크 공유 적용됨');
    DoActions(SetMissionObjectives('\x0610li\x01: 자원, 인구, 업글, 테크 공유 적용됨'))
    # (Line 28) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 29) }
    # (Line 36) const TeamInfoList			= EUDArray(TeamNumber);

TeamInfoList = _CGFW(lambda: [EUDArray(TeamNumber)], 1)[0]
# (Line 38) const TeamDivide			= [9,9,9,9, 9,9,9,9, 9,9,9,9];
TeamDivide = _CGFW(lambda: [_ARR(FlattenList([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]))], 1)[0]
# (Line 41) const UPGRADENUMBER 		= 55;
UPGRADENUMBER = _CGFW(lambda: [55], 1)[0]
# (Line 42) const TECHNUMBER			= 35;
TECHNUMBER = _CGFW(lambda: [35], 1)[0]
# (Line 44) const TeamUpgradeCheck		= EUDArray(TeamNumber* UPGRADENUMBER);
TeamUpgradeCheck = _CGFW(lambda: [EUDArray(TeamNumber * UPGRADENUMBER)], 1)[0]
# (Line 45) const TeamTechCheck			= EUDArray(TeamNumber* TECHNUMBER);
TeamTechCheck = _CGFW(lambda: [EUDArray(TeamNumber * TECHNUMBER)], 1)[0]
# (Line 47) const ZSuppliesAvailable	= 0x582144;
ZSuppliesAvailable = _CGFW(lambda: [0x582144], 1)[0]
# (Line 48) const ZSuppliesUsed			= 0x582174;
ZSuppliesUsed = _CGFW(lambda: [0x582174], 1)[0]
# (Line 50) const TSuppliesAvailable	= 0x5821D4;
TSuppliesAvailable = _CGFW(lambda: [0x5821D4], 1)[0]
# (Line 51) const TSuppliesUsed			= 0x582204;
TSuppliesUsed = _CGFW(lambda: [0x582204], 1)[0]
# (Line 53) const PSuppliesAvailable	= 0x582264;
PSuppliesAvailable = _CGFW(lambda: [0x582264], 1)[0]
# (Line 54) const PSuppliesUsed			= 0x582294;
PSuppliesUsed = _CGFW(lambda: [0x582294], 1)[0]
# (Line 56) object TeamInfo
# (Line 57) {
# (Line 58) var ore;
class TeamInfo(EUDStruct):
    # (Line 59) var gas;
    # (Line 60) var race; // 1 zerg, 2 terran, 3 protoss
    # (Line 61) var suppliesUsed;
    # (Line 62) var suppliesAvail;
    # (Line 63) };
    # (Line 65) function GetSharedTeam(teamID): TeamInfo
    _fields_ = [
        'ore',
        'gas',
        'race',
        'suppliesUsed',
        'suppliesAvail',
    ]

# (Line 66) {
@EUDTypedFunc([None], [TeamInfo])
def GetSharedTeam(teamID):
    # (Line 67) return TeamInfoList[teamID];
    EUDReturn(TeamInfoList[teamID])
    # (Line 68) }
    # (Line 70) function SetSharedTeam(teamID, newVal: TeamInfo)

# (Line 71) {
@EUDTypedFunc([None, TeamInfo])
def SetSharedTeam(teamID, newVal):
    # (Line 72) if(TeamInfoList[teamID])
    if EUDIf()(TeamInfoList[teamID]):
        # (Line 73) {
        # (Line 74) TeamInfo.free(TeamInfoList[teamID]);
        TeamInfo.free(TeamInfoList[teamID])
        # (Line 75) }
        # (Line 76) TeamInfoList[teamID] = newVal;
    EUDEndIf()
    _ARRW(TeamInfoList, teamID) << (newVal)
    # (Line 77) }
    # (Line 80) function IsTeammate(playerID, teamID)

# (Line 81) {
@EUDFunc
def IsTeammate(playerID, teamID):
    # (Line 82) if(teamID == TeamDivide[playerID])
    if EUDIf()(teamID == TeamDivide[playerID]):
        # (Line 83) return 1;
        EUDReturn(1)
        # (Line 84) else
        # (Line 85) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 86) }
    EUDEndIf()
    # (Line 88) function SetTeam(teamID, race)

# (Line 89) {
@EUDFunc
def SetTeam(teamID, race):
    # (Line 90) const team 			= TeamInfo.alloc();
    team = TeamInfo.alloc()
    # (Line 91) for(var i=0; i<TeamManNumber; i++){
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= TeamManNumber, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 92) TeamDivide[teamID*TeamManNumber + i] = teamID; // P1~P3을 팀 (teamID)으로
        _ARRW(TeamDivide, teamID * TeamManNumber + i) << (teamID)
        # (Line 93) }
        # (Line 94) team.ore 			= 0;
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    _ATTW(team, 'ore') << (0)
    # (Line 95) team.gas 			= 0;
    _ATTW(team, 'gas') << (0)
    # (Line 96) team.race 			= race; // 1 zerg, 2 terran, 3 protoss
    _ATTW(team, 'race') << (race)
    # (Line 97) team.suppliesUsed 	= 0;
    _ATTW(team, 'suppliesUsed') << (0)
    # (Line 98) team.suppliesAvail	= 0;
    _ATTW(team, 'suppliesAvail') << (0)
    # (Line 100) SetSharedTeam(teamID, team);
    SetSharedTeam(teamID, team)
    # (Line 101) }
    # (Line 132) function GetResource(playerID)

# (Line 133) {// 이상없음
@EUDFunc
def GetResource(playerID):
    # (Line 134) const ore = dwread_epd(EPD(0x57F0F0) + playerID);
    ore = f_dwread_epd(EPD(0x57F0F0) + playerID)
    # (Line 135) const gas = dwread_epd(EPD(0x57F120) + playerID);
    gas = f_dwread_epd(EPD(0x57F120) + playerID)
    # (Line 137) return ore, gas;
    EUDReturn(ore, gas)
    # (Line 138) }
    # (Line 140) function GetSharedResource(teamID)

# (Line 141) {// 공유된 자원 구함
@EUDFunc
def GetSharedResource(teamID):
    # (Line 142) const team = GetSharedTeam(teamID);
    team = GetSharedTeam(teamID)
    # (Line 144) var totalOre = 0;
    totalOre = EUDVariable()
    totalOre << (0)
    # (Line 145) var totalGas = 0;
    totalGas = EUDVariable()
    totalGas << (0)
    # (Line 146) var playerNumber = 0;
    playerNumber = EUDVariable()
    playerNumber << (0)
    # (Line 148) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 149) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 151) if(IsTeammate(p, teamID))
    if EUDIf()(IsTeammate(p, teamID)):
        # (Line 152) {
        # (Line 153) const o, g = GetResource(p);
        o, g = List2Assignable([GetResource(p)])
        # (Line 154) totalOre = o + totalOre;
        totalOre << (o + totalOre)
        # (Line 155) totalGas = g + totalGas;
        totalGas << (g + totalGas)
        # (Line 156) playerNumber++;
        playerNumber.__iadd__(1)
        # (Line 157) }
        # (Line 158) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 160) const pastOre = team.ore;
    pastOre = team.ore
    # (Line 161) const pastGas = team.gas;
    pastGas = team.gas
    # (Line 163) const sharedOre = totalOre - pastOre* (playerNumber - 1) ;
    sharedOre = totalOre - pastOre * (playerNumber - 1)
    # (Line 164) const sharedGas = totalGas - pastGas* (playerNumber - 1) ;
    sharedGas = totalGas - pastGas * (playerNumber - 1)
    # (Line 166) return sharedOre, sharedGas;
    EUDReturn(sharedOre, sharedGas)
    # (Line 167) }
    # (Line 169) function SetSharedResource(teamID)

# (Line 170) {//문제  더블루프?
@EUDFunc
def SetSharedResource(teamID):
    # (Line 171) const team = GetSharedTeam(teamID);
    team = GetSharedTeam(teamID)
    # (Line 173) const sharedOre, sharedGas = GetSharedResource(teamID);
    sharedOre, sharedGas = List2Assignable([GetSharedResource(teamID)])
    # (Line 175) team.ore = sharedOre;
    _ATTW(team, 'ore') << (sharedOre)
    # (Line 176) team.gas = sharedGas;
    _ATTW(team, 'gas') << (sharedGas)
    # (Line 178) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 179) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 181) if(IsTeammate(p, teamID))
    if EUDIf()(IsTeammate(p, teamID)):
        # (Line 182) {
        # (Line 183) SetResources(p, SetTo, sharedOre, Ore);
        DoActions(SetResources(p, SetTo, sharedOre, Ore))
        # (Line 184) SetResources(p, SetTo, sharedGas, Gas);
        DoActions(SetResources(p, SetTo, sharedGas, Gas))
        # (Line 185) }
        # (Line 186) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 187) }
    # (Line 188) function IsDifferResource(playerID, teamID)

# (Line 189) {
@EUDFunc
def IsDifferResource(playerID, teamID):
    # (Line 191) const team = GetSharedTeam(teamID);
    team = GetSharedTeam(teamID)
    # (Line 193) if(IsTeammate(playerID, teamID))
    if EUDIf()(IsTeammate(playerID, teamID)):
        # (Line 194) {
        # (Line 195) var pOre, pGas = GetResource(playerID);
        pOre, pGas = _MVAR([GetResource(playerID)])
        # (Line 196) if(team.ore != pOre || team.gas != pGas)
        if EUDIf()(EUDSCOr()(team.ore == pOre, neg=True)(team.gas == pGas, neg=True)()):
            # (Line 197) {
            # (Line 198) SetSharedResource(teamID);
            SetSharedResource(teamID)
            # (Line 199) }
            # (Line 201) }
        EUDEndIf()
        # (Line 202) }
    EUDEndIf()
    # (Line 206) function GetSupplies(playerID, race)

# (Line 207) {
@EUDFunc
def GetSupplies(playerID, race):
    # (Line 209) var suppliesUsed = 0;
    suppliesUsed = EUDVariable()
    suppliesUsed << (0)
    # (Line 210) var suppliesAvail = 0;
    suppliesAvail = EUDVariable()
    suppliesAvail << (0)
    # (Line 211) if(race == 1)
    if EUDIf()(race == 1):
        # (Line 212) {//zerg
        # (Line 213) suppliesUsed = dwread_epd(EPD(ZSuppliesUsed) + playerID);
        suppliesUsed << (f_dwread_epd(EPD(ZSuppliesUsed) + playerID))
        # (Line 214) suppliesAvail = dwread_epd(EPD(ZSuppliesAvailable) + playerID);
        suppliesAvail << (f_dwread_epd(EPD(ZSuppliesAvailable) + playerID))
        # (Line 215) }
        # (Line 216) if(race == 2)
    EUDEndIf()
    if EUDIf()(race == 2):
        # (Line 217) {//terran
        # (Line 218) suppliesUsed = dwread_epd(EPD(TSuppliesUsed) + playerID);
        suppliesUsed << (f_dwread_epd(EPD(TSuppliesUsed) + playerID))
        # (Line 219) suppliesAvail = dwread_epd(EPD(TSuppliesAvailable) + playerID);
        suppliesAvail << (f_dwread_epd(EPD(TSuppliesAvailable) + playerID))
        # (Line 220) }
        # (Line 221) if(race == 3)
    EUDEndIf()
    if EUDIf()(race == 3):
        # (Line 222) {//protoss
        # (Line 223) suppliesUsed = dwread_epd(EPD(PSuppliesUsed) + playerID);
        suppliesUsed << (f_dwread_epd(EPD(PSuppliesUsed) + playerID))
        # (Line 224) suppliesAvail = dwread_epd(EPD(PSuppliesAvailable) + playerID);
        suppliesAvail << (f_dwread_epd(EPD(PSuppliesAvailable) + playerID))
        # (Line 225) }
        # (Line 226) return suppliesUsed, suppliesAvail;
    EUDEndIf()
    EUDReturn(suppliesUsed, suppliesAvail)
    # (Line 227) }
    # (Line 230) function GetSharedSupplies(teamID)

# (Line 231) {// 인구 연동
@EUDFunc
def GetSharedSupplies(teamID):
    # (Line 232) const team = GetSharedTeam(teamID);
    team = GetSharedTeam(teamID)
    # (Line 234) var totalSuppliesUsed = 0;
    totalSuppliesUsed = EUDVariable()
    totalSuppliesUsed << (0)
    # (Line 235) var totalsuppliesAvail = 0;
    totalsuppliesAvail = EUDVariable()
    totalsuppliesAvail << (0)
    # (Line 236) var playerNumber = 0;
    playerNumber = EUDVariable()
    playerNumber << (0)
    # (Line 238) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 239) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 240) if(IsTeammate(p, teamID))
    if EUDIf()(IsTeammate(p, teamID)):
        # (Line 241) {
        # (Line 242) const u, m = GetSupplies(p, team.race);
        u, m = List2Assignable([GetSupplies(p, team.race)])
        # (Line 243) totalSuppliesUsed += u;
        totalSuppliesUsed.__iadd__(u)
        # (Line 244) totalsuppliesAvail  += m;
        totalsuppliesAvail.__iadd__(m)
        # (Line 245) playerNumber++;
        playerNumber.__iadd__(1)
        # (Line 246) }
        # (Line 247) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 249) const pastSuppliesUsed = team.suppliesUsed;
    pastSuppliesUsed = team.suppliesUsed
    # (Line 250) const pastsuppliesAvail = team.suppliesAvail;
    pastsuppliesAvail = team.suppliesAvail
    # (Line 252) const sharedSuppliesUsed = totalSuppliesUsed - (playerNumber -1) * pastSuppliesUsed;
    sharedSuppliesUsed = totalSuppliesUsed - (playerNumber - 1) * pastSuppliesUsed
    # (Line 253) const sharedsuppliesAvail = totalsuppliesAvail  - (playerNumber -1) * pastsuppliesAvail;
    sharedsuppliesAvail = totalsuppliesAvail - (playerNumber - 1) * pastsuppliesAvail
    # (Line 254) var b = 0;
    b = EUDVariable()
    b << (0)
    # (Line 256) return sharedSuppliesUsed, sharedsuppliesAvail;
    EUDReturn(sharedSuppliesUsed, sharedsuppliesAvail)
    # (Line 257) }
    # (Line 259) function SetSupplies(playerID, race, suppliesUsed, suppliesAvail)

# (Line 260) {
@EUDFunc
def SetSupplies(playerID, race, suppliesUsed, suppliesAvail):
    # (Line 261) if(race == 1)
    if EUDIf()(race == 1):
        # (Line 262) {//zerg
        # (Line 263) SetMemoryEPD(EPD(ZSuppliesUsed) + playerID, SetTo, suppliesUsed);
        DoActions(SetMemoryEPD(EPD(ZSuppliesUsed) + playerID, SetTo, suppliesUsed))
        # (Line 264) SetMemoryEPD(EPD(ZSuppliesAvailable) + playerID, SetTo, suppliesAvail);
        DoActions(SetMemoryEPD(EPD(ZSuppliesAvailable) + playerID, SetTo, suppliesAvail))
        # (Line 265) }
        # (Line 266) if(race == 2)
    EUDEndIf()
    if EUDIf()(race == 2):
        # (Line 267) {//terran
        # (Line 268) SetMemoryEPD(EPD(TSuppliesUsed) + playerID, SetTo, suppliesUsed);
        DoActions(SetMemoryEPD(EPD(TSuppliesUsed) + playerID, SetTo, suppliesUsed))
        # (Line 269) SetMemoryEPD(EPD(TSuppliesAvailable) + playerID, SetTo, suppliesAvail);
        DoActions(SetMemoryEPD(EPD(TSuppliesAvailable) + playerID, SetTo, suppliesAvail))
        # (Line 270) }
        # (Line 271) if(race == 3)
    EUDEndIf()
    if EUDIf()(race == 3):
        # (Line 272) {//protoss
        # (Line 273) SetMemoryEPD(EPD(PSuppliesUsed) + playerID, SetTo, suppliesUsed);
        DoActions(SetMemoryEPD(EPD(PSuppliesUsed) + playerID, SetTo, suppliesUsed))
        # (Line 274) SetMemoryEPD(EPD(PSuppliesAvailable) + playerID, SetTo, suppliesAvail);
        DoActions(SetMemoryEPD(EPD(PSuppliesAvailable) + playerID, SetTo, suppliesAvail))
        # (Line 275) }
        # (Line 276) }
    EUDEndIf()
    # (Line 279) function SetSharedSupplies(teamID)

# (Line 280) {
@EUDFunc
def SetSharedSupplies(teamID):
    # (Line 281) const team = GetSharedTeam(teamID);
    team = GetSharedTeam(teamID)
    # (Line 283) const sharedSuppliesUsed, sharedsuppliesAvail = GetSharedSupplies(teamID);
    sharedSuppliesUsed, sharedsuppliesAvail = List2Assignable([GetSharedSupplies(teamID)])
    # (Line 285) team.suppliesUsed = sharedSuppliesUsed;
    _ATTW(team, 'suppliesUsed') << (sharedSuppliesUsed)
    # (Line 286) team.suppliesAvail = sharedsuppliesAvail;
    _ATTW(team, 'suppliesAvail') << (sharedsuppliesAvail)
    # (Line 288) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 289) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 291) if(IsTeammate(p, teamID))
    if EUDIf()(IsTeammate(p, teamID)):
        # (Line 292) {
        # (Line 293) SetSupplies(p, team.race, sharedSuppliesUsed, sharedsuppliesAvail);
        SetSupplies(p, team.race, sharedSuppliesUsed, sharedsuppliesAvail)
        # (Line 294) }
        # (Line 295) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 296) }
    # (Line 298) function IsDifferSupplies(playerID, teamID)

# (Line 299) {
@EUDFunc
def IsDifferSupplies(playerID, teamID):
    # (Line 301) const team = GetSharedTeam(teamID);
    team = GetSharedTeam(teamID)
    # (Line 303) if(IsTeammate(playerID, teamID))
    if EUDIf()(IsTeammate(playerID, teamID)):
        # (Line 304) {
        # (Line 305) var pSuppliesUsed, pSuppliesAvail = GetSupplies(playerID, team.race);
        pSuppliesUsed, pSuppliesAvail = _MVAR([GetSupplies(playerID, team.race)])
        # (Line 306) if(team.suppliesUsed != pSuppliesUsed || team.suppliesAvail != pSuppliesAvail)
        if EUDIf()(EUDSCOr()(team.suppliesUsed == pSuppliesUsed, neg=True)(team.suppliesAvail == pSuppliesAvail, neg=True)()):
            # (Line 307) {
            # (Line 308) SetSharedSupplies(teamID);
            SetSharedSupplies(teamID)
            # (Line 309) }
            # (Line 310) }
        EUDEndIf()
        # (Line 311) }
    EUDEndIf()
    # (Line 314) function GetCurrentUpgrade(player, upgrade)

# (Line 315) {//현재 업그레이드 수치를 반환
@EUDFunc
def GetCurrentUpgrade(player, upgrade):
    # (Line 316) const count = bread(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade / 46)) + 0x207C * (upgrade / 46));
    count = f_bread(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade // 46)) + 0x207C * (upgrade // 46))
    # (Line 317) return count;
    EUDReturn(count)
    # (Line 319) }
    # (Line 321) function SetCurrentUpgrade(player, upgrade, count)

# (Line 322) {//업그레이드 설정
@EUDFunc
def SetCurrentUpgrade(player, upgrade, count):
    # (Line 324) bwrite(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade / 46)) + 0x207C * (upgrade / 46), count);
    f_bwrite(0x58D2B0 + upgrade + player * (46 - 31 * (upgrade // 46)) + 0x207C * (upgrade // 46), count)
    # (Line 325) }
    # (Line 328) function GetSharedUpgrade(teamID, upgradeNumber)

# (Line 329) {// 업그레이드 연동
@EUDFunc
def GetSharedUpgrade(teamID, upgradeNumber):
    # (Line 332) const upgradeVal = GetCurrentUpgrade(teamID*TeamManNumber, upgradeNumber);
    upgradeVal = GetCurrentUpgrade(teamID * TeamManNumber, upgradeNumber)
    # (Line 333) return upgradeVal;
    EUDReturn(upgradeVal)
    # (Line 334) }
    # (Line 336) function SetSharedUpgrade(teamID)

# (Line 337) {
@EUDFunc
def SetSharedUpgrade(teamID):
    # (Line 338) for(var j=1; j<TeamManNumber; j++)
    j = EUDVariable()
    j << (1)
    if EUDWhile()(j >= TeamManNumber, neg=True):
        def _t2():
            j.__iadd__(1)
        # (Line 339) {//p2~p3, p5~p6
        # (Line 340) for(var i=0; i<UPGRADENUMBER; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= UPGRADENUMBER, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 341) {//1~ end
            # (Line 343) const savedUpgradeLevel = TeamUpgradeCheck[i+ UPGRADENUMBER*teamID];
            savedUpgradeLevel = TeamUpgradeCheck[i + UPGRADENUMBER * teamID]
            # (Line 345) if(savedUpgradeLevel == 1 && i > 16){
            if EUDIf()(EUDSCAnd()(savedUpgradeLevel == 1)(i <= 16, neg=True)()):
                # (Line 346) return;
                EUDReturn()
                # (Line 347) }
                # (Line 349) else
                # (Line 350) {
            if EUDElse()():
                # (Line 352) const teamUpgradeLevel = GetSharedUpgrade(teamID, i);
                teamUpgradeLevel = GetSharedUpgrade(teamID, i)
                # (Line 353) if(savedUpgradeLevel != teamUpgradeLevel)
                if EUDIf()(savedUpgradeLevel == teamUpgradeLevel, neg=True):
                    # (Line 354) {
                    # (Line 356) SetCurrentUpgrade(teamID*TeamManNumber+j, i, teamUpgradeLevel);
                    SetCurrentUpgrade(teamID * TeamManNumber + j, i, teamUpgradeLevel)
                    # (Line 357) TeamUpgradeCheck[i+ UPGRADENUMBER*teamID] = teamUpgradeLevel;
                    _ARRW(TeamUpgradeCheck, i + UPGRADENUMBER * teamID) << (teamUpgradeLevel)
                    # (Line 358) }
                    # (Line 359) }
                EUDEndIf()
                # (Line 360) }
            EUDEndIf()
            # (Line 361) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 362) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 365) function GetCurrentTech(player, tech)

# (Line 366) {
@EUDFunc
def GetCurrentTech(player, tech):
    # (Line 367) const count = bread(0x58CF44 + tech + player * (24 - 4 * (tech / 24)) + 0x21FC * (tech / 24));
    count = f_bread(0x58CF44 + tech + player * (24 - 4 * (tech // 24)) + 0x21FC * (tech // 24))
    # (Line 368) return count;
    EUDReturn(count)
    # (Line 369) }
    # (Line 371) function SetCurrentTech(player, tech, count)

# (Line 372) {
@EUDFunc
def SetCurrentTech(player, tech, count):
    # (Line 373) bwrite(0x58CF44 + tech + player * (24 - 4 * (tech / 24)) + 0x21FC * (tech / 24), count);
    f_bwrite(0x58CF44 + tech + player * (24 - 4 * (tech // 24)) + 0x21FC * (tech // 24), count)
    # (Line 374) }
    # (Line 377) function GetSharedTech(teamID, techNumber)

# (Line 378) {//Get P1, P4 tech(생산자가 업글하니까)
@EUDFunc
def GetSharedTech(teamID, techNumber):
    # (Line 379) const techVal = GetCurrentTech(teamID*TeamManNumber, techNumber);
    techVal = GetCurrentTech(teamID * TeamManNumber, techNumber)
    # (Line 380) return techVal;
    EUDReturn(techVal)
    # (Line 381) }
    # (Line 383) function SetSharedTech(teamID)

# (Line 384) {
@EUDFunc
def SetSharedTech(teamID):
    # (Line 385) for(var j=1; j<TeamManNumber; j++)
    j = EUDVariable()
    j << (1)
    if EUDWhile()(j >= TeamManNumber, neg=True):
        def _t2():
            j.__iadd__(1)
        # (Line 386) {//p2~p3, p5~p6
        # (Line 387) for(var i=0; i<TECHNUMBER; i++)
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= TECHNUMBER, neg=True):
            def _t4():
                i.__iadd__(1)
            # (Line 388) {// 1~ end
            # (Line 390) const savedTechLevel = TeamTechCheck[i+ TECHNUMBER*teamID];
            savedTechLevel = TeamTechCheck[i + TECHNUMBER * teamID]
            # (Line 392) const teamTechLevel = GetSharedTech(teamID, i);
            teamTechLevel = GetSharedTech(teamID, i)
            # (Line 393) if(savedTechLevel != teamTechLevel)
            if EUDIf()(savedTechLevel == teamTechLevel, neg=True):
                # (Line 394) {
                # (Line 396) SetCurrentTech(teamID*TeamManNumber+j, i, teamTechLevel);
                SetCurrentTech(teamID * TeamManNumber + j, i, teamTechLevel)
                # (Line 397) TeamTechCheck[i+ TECHNUMBER*teamID] = teamTechLevel;
                _ARRW(TeamTechCheck, i + TECHNUMBER * teamID) << (teamTechLevel)
                # (Line 398) }
                # (Line 400) }
            EUDEndIf()
            # (Line 401) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 402) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 406) function GetSelectedUnitEPD(playerID)

# (Line 407) {
@EUDFunc
def GetSelectedUnitEPD(playerID):
    # (Line 409) const unitPtr, unitEpd = dwepdread_epd_safe(EPD(0x6284E8) + 12* playerID);
    unitPtr, unitEpd = List2Assignable([f_dwepdread_epd_safe(EPD(0x6284E8) + 12 * playerID)])
    # (Line 411) if (unitPtr != 0)
    if EUDIf()(unitPtr == 0, neg=True):
        # (Line 412) return unitEpd;
        EUDReturn(unitEpd)
        # (Line 413) else
        # (Line 414) return -1;
    if EUDElse()():
        EUDReturn(-1)
        # (Line 415) }
    EUDEndIf()
    # (Line 417) function SetLocationXY(posX, posY, locationNum, size)

# (Line 418) {// 로케이션을 해당xy로 옮김
@EUDFunc
def SetLocationXY(posX, posY, locationNum, size):
    # (Line 419) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 0, SetTo, posX - size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 0, SetTo, posX - size))
    # (Line 420) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 1, SetTo, posY - size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 1, SetTo, posY - size))
    # (Line 421) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 2, SetTo, posX + size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 2, SetTo, posX + size))
    # (Line 422) SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 3, SetTo, posY + size);
    DoActions(SetMemoryEPD(EPD(0x58DC60) + locationNum * 5 + 3, SetTo, posY + size))
    # (Line 423) }
    # (Line 425) function isUnit(unitType)

# (Line 426) {
@EUDFunc
def f_isUnit(unitType):
    # (Line 427) if(	unitType < 104
    _t1 = EUDIf()
    # (Line 428) && unitType != 35 // larva
    # (Line 429) && unitType != 36 // egg
    # (Line 430) && unitType != 59 // cocoon
    # (Line 431) && unitType != 73 // intercepter
    # (Line 432) && unitType != 85 // scarb
    # (Line 433) && unitType != 97 // lurker egg
    # (Line 434) || unitType == 107 // scaner sweep
    # (Line 435) )
    if _t1(EUDSCOr()(EUDSCAnd()(unitType >= 104, neg=True)(unitType == 35, neg=True)(unitType == 36, neg=True)(unitType == 59, neg=True)(unitType == 73, neg=True)(unitType == 85, neg=True)(unitType == 97, neg=True)())(unitType == 107)()):
        # (Line 436) {
        # (Line 437) return 1;
        EUDReturn(1)
        # (Line 438) }
        # (Line 439) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 440) }
    EUDEndIf()
    # (Line 442) function isNonBattleUnit(unitType)

# (Line 443) {
@EUDFunc
def f_isNonBattleUnit(unitType):
    # (Line 444) if(	unitType == 7	//scv
    _t1 = EUDIf()
    # (Line 445) && unitType == 11 //dropship
    # (Line 446) && unitType == 41 //drone
    # (Line 447) && unitType == 42 //overlord
    # (Line 448) && unitType == 64 //probe
    # (Line 449) && unitType == 69 //shuttle
    # (Line 450) && unitType != 107
    # (Line 451) )
    if _t1(EUDSCAnd()(unitType == 7)(unitType == 11)(unitType == 41)(unitType == 42)(unitType == 64)(unitType == 69)(unitType == 107, neg=True)()):
        # (Line 452) {
        # (Line 453) return 1;
        EUDReturn(1)
        # (Line 454) }
        # (Line 455) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 456) }
    EUDEndIf()
    # (Line 458) function GiveSelectedUnit(playerID)

# (Line 459) {
@EUDFunc
def GiveSelectedUnit(playerID):
    # (Line 460) const unitEpd = GetSelectedUnitEPD(playerID);
    unitEpd = GetSelectedUnitEPD(playerID)
    # (Line 462) if(unitEpd != -1)
    if EUDIf()(unitEpd == -1, neg=True):
        # (Line 463) {
        # (Line 464) const unitType = dwread_epd(unitEpd + 0x64 /4);
        unitType = f_dwread_epd(unitEpd + 0x64 // 4)
        # (Line 465) if(isUnit(unitType))
        if EUDIf()(f_isUnit(unitType)):
            # (Line 466) {
            # (Line 467) const teamID = TeamDivide[playerID];
            teamID = TeamDivide[playerID]
            # (Line 468) const player = dwbreak(dwread_epd(unitEpd + 0x4C /4))[[2]];
            player = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[2]
            # (Line 470) if((player != playerID) && IsTeammate(player, teamID))
            if EUDIf()(EUDSCAnd()((EUDNot(player == playerID)))(IsTeammate(player, teamID))()):
                # (Line 471) {
                # (Line 472) const unitX, unitY = dwbreak(dwread_epd(unitEpd + 0x28 /4))[[0, 1]];
                unitX, unitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(unitEpd + 0x28 // 4)), [0, 1])])
                # (Line 473) if(isNonBattleUnit(unitType))
                if EUDIf()(f_isNonBattleUnit(unitType)):
                    # (Line 474) {//battle unit = give multiple
                    # (Line 475) SetLocationXY(unitX, unitY, locationDot, 32*20);
                    SetLocationXY(unitX, unitY, locationDot, 32 * 20)
                    # (Line 476) GiveUnits(All, unitType, player, locationDot+1, playerID);
                    DoActions(GiveUnits(All, unitType, player, locationDot + 1, playerID))
                    # (Line 477) }
                    # (Line 478) else
                    # (Line 479) {//transport, worker unit = give 1
                if EUDElse()():
                    # (Line 480) SetLocationXY(unitX, unitY, locationDot, 0);
                    SetLocationXY(unitX, unitY, locationDot, 0)
                    # (Line 481) GiveUnits(1, unitType, player, locationDot+1, playerID);
                    DoActions(GiveUnits(1, unitType, player, locationDot + 1, playerID))
                    # (Line 482) }
                    # (Line 483) }
                EUDEndIf()
                # (Line 484) }
            EUDEndIf()
            # (Line 485) }
        EUDEndIf()
        # (Line 486) }
    EUDEndIf()
    # (Line 492) function meleeTrigger(teamID)

# (Line 493) {
@EUDFunc
def f_meleeTrigger(teamID):
    # (Line 494) const headPlayer = teamID*TeamManNumber;
    headPlayer = teamID * TeamManNumber
    # (Line 496) if(Deaths(headPlayer, Exactly, 0, 215))
    if EUDIf()(Deaths(headPlayer, Exactly, 0, 215)):
        # (Line 497) {
        # (Line 498) SetResources(headPlayer, SetTo, 50, Ore);
        DoActions(SetResources(headPlayer, SetTo, 50, Ore))
        # (Line 499) SetDeaths(headPlayer, SetTo, 1, 215);
        DoActions(SetDeaths(headPlayer, SetTo, 1, 215))
        # (Line 500) }
        # (Line 502) if(Command(headPlayer, Exactly, 0, '(buildings)'))
    EUDEndIf()
    if EUDIf()(Command(headPlayer, Exactly, 0, '(buildings)')):
        # (Line 503) {
        # (Line 504) Defeat();
        DoActions(Defeat())
        # (Line 505) }
        # (Line 507) }
    EUDEndIf()
    # (Line 509) const UnitID_DeathCounter1	= 205; //leftdoor

UnitID_DeathCounter1 = _CGFW(lambda: [205], 1)[0]
# (Line 510) const UnitID_DeathCounter2	= 206; //door
UnitID_DeathCounter2 = _CGFW(lambda: [206], 1)[0]
# (Line 512) function DeathCount()
# (Line 513) {//timer
@EUDFunc
def DeathCount():
    # (Line 514) if(Deaths($P8, AtLeast, 1, UnitID_DeathCounter1))
    if EUDIf()(Deaths(7, AtLeast, 1, UnitID_DeathCounter1)):
        # (Line 515) SetDeaths($P8, Subtract, 1, UnitID_DeathCounter1);
        DoActions(SetDeaths(7, Subtract, 1, UnitID_DeathCounter1))
        # (Line 517) if(Deaths($P8, AtLeast, 1, UnitID_DeathCounter2))
    EUDEndIf()
    if EUDIf()(Deaths(7, AtLeast, 1, UnitID_DeathCounter2)):
        # (Line 518) SetDeaths($P8, Subtract, 1, UnitID_DeathCounter2);
        DoActions(SetDeaths(7, Subtract, 1, UnitID_DeathCounter2))
        # (Line 520) }
    EUDEndIf()
    # (Line 522) function onPluginStart()

# (Line 523) {
@EUDFunc
def onPluginStart():
    # (Line 524) ShowText();
    ShowText()
    # (Line 527) for(var i=0; i<TeamNumber; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= TeamNumber, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 528) {
        # (Line 529) const teamHead = i*TeamManNumber;
        teamHead = i * TeamManNumber
        # (Line 530) if(Command(teamHead, Exactly, 1, $U('Zerg Hatchery'))){
        if EUDIf()(Command(teamHead, Exactly, 1, EncodeUnit('Zerg Hatchery'))):
            # (Line 531) SetTeam(i, 1);
            SetTeam(i, 1)
            # (Line 532) }
            # (Line 533) if(Command(teamHead, Exactly, 1, $U('Terran Command Center'))){
        EUDEndIf()
        if EUDIf()(Command(teamHead, Exactly, 1, EncodeUnit('Terran Command Center'))):
            # (Line 534) SetTeam(i, 2);
            SetTeam(i, 2)
            # (Line 535) }
            # (Line 536) if(Command(teamHead, Exactly, 1, $U('Protoss Nexus'))){
        EUDEndIf()
        if EUDIf()(Command(teamHead, Exactly, 1, EncodeUnit('Protoss Nexus'))):
            # (Line 537) SetTeam(i, 3);
            SetTeam(i, 3)
            # (Line 538) }
            # (Line 539) }
        EUDEndIf()
        # (Line 540) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 542) function beforeTriggerExec()

# (Line 543) {
@EUDFunc
def beforeTriggerExec():
    # (Line 544) DeathCount();
    DeathCount()
    # (Line 545) for(var iTeam=0; iTeam<TeamNumber; iTeam++)
    iTeam = EUDVariable()
    iTeam << (0)
    if EUDWhile()(iTeam >= TeamNumber, neg=True):
        def _t2():
            iTeam.__iadd__(1)
        # (Line 546) {//team 0~1
        # (Line 548) meleeTrigger(iTeam);
        f_meleeTrigger(iTeam)
        # (Line 549) if(Deaths($P8, Exactly, 0, UnitID_DeathCounter1))
        if EUDIf()(Deaths(7, Exactly, 0, UnitID_DeathCounter1)):
            # (Line 550) {// 1/24 sec
            # (Line 551) for(var p=0; p<6; p++)
            p = EUDVariable()
            p << (0)
            if EUDWhile()(p >= 6, neg=True):
                def _t5():
                    p.__iadd__(1)
                # (Line 552) {//p1~6
                # (Line 553) if(playerexist(p))
                if EUDIf()(f_playerexist(p)):
                    # (Line 554) {
                    # (Line 555) IsDifferResource(p, iTeam);	// 팀간 자원공유
                    IsDifferResource(p, iTeam)
                    # (Line 556) IsDifferSupplies(p, iTeam);	// 팀간 인구공유
                    IsDifferSupplies(p, iTeam)
                    # (Line 557) GiveSelectedUnit(p);		// 팀간 선택한 유닛주기
                    GiveSelectedUnit(p)
                    # (Line 558) }
                    # (Line 559) }
                EUDEndIf()
                # (Line 560) SetDeaths($P8, SetTo, 2, UnitID_DeathCounter1);
                EUDSetContinuePoint()
                _t5()
            EUDEndWhile()
            DoActions(SetDeaths(7, SetTo, 2, UnitID_DeathCounter1))
            # (Line 561) }
            # (Line 563) if(Deaths($P8, Exactly, 0, UnitID_DeathCounter2))
        EUDEndIf()
        if EUDIf()(Deaths(7, Exactly, 0, UnitID_DeathCounter2)):
            # (Line 564) {// 1 sec
            # (Line 565) SetSharedTech(iTeam);			// 팀간 기술공유
            SetSharedTech(iTeam)
            # (Line 566) SetSharedUpgrade(iTeam);		// 팀간 업글공유
            SetSharedUpgrade(iTeam)
            # (Line 567) SetDeaths($P8, SetTo, 48, UnitID_DeathCounter2);
            DoActions(SetDeaths(7, SetTo, 48, UnitID_DeathCounter2))
            # (Line 568) }
            # (Line 569) }
        EUDEndIf()
        # (Line 570) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 572) function afterTriggerExec()

# (Line 573) {
@EUDFunc
def afterTriggerExec():
    # (Line 575) SetMemory(0x6509A0, SetTo, 0);
    DoActions(SetMemory(0x6509A0, SetTo, 0))
    # (Line 576) }
