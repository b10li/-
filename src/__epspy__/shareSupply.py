## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 17) import shareTeam;
import shareTeam
# (Line 19) const ZSuppliesAvailable	= 0x582144;
ZSuppliesAvailable = _CGFW(lambda: [0x582144], 1)[0]
# (Line 20) const ZSuppliesUsed			= 0x582174;
ZSuppliesUsed = _CGFW(lambda: [0x582174], 1)[0]
# (Line 22) const TSuppliesAvailable	= 0x5821D4;
TSuppliesAvailable = _CGFW(lambda: [0x5821D4], 1)[0]
# (Line 23) const TSuppliesUsed			= 0x582204;
TSuppliesUsed = _CGFW(lambda: [0x582204], 1)[0]
# (Line 25) const PSuppliesAvailable	= 0x582264;
PSuppliesAvailable = _CGFW(lambda: [0x582264], 1)[0]
# (Line 26) const PSuppliesUsed			= 0x582294;
PSuppliesUsed = _CGFW(lambda: [0x582294], 1)[0]
# (Line 28) function GetSupplies(playerID, race)
# (Line 29) {
@EUDFunc
def GetSupplies(playerID, race):
    # (Line 31) var suppliesUsed = 0;
    suppliesUsed = EUDVariable()
    suppliesUsed << (0)
    # (Line 32) var suppliesAvail = 0;
    suppliesAvail = EUDVariable()
    suppliesAvail << (0)
    # (Line 33) if(race == 1)
    if EUDIf()(race == 1):
        # (Line 34) {//zerg
        # (Line 35) suppliesUsed = dwread_epd(EPD(ZSuppliesUsed) + playerID);
        suppliesUsed << (f_dwread_epd(EPD(ZSuppliesUsed) + playerID))
        # (Line 36) suppliesAvail = dwread_epd(EPD(ZSuppliesAvailable) + playerID);
        suppliesAvail << (f_dwread_epd(EPD(ZSuppliesAvailable) + playerID))
        # (Line 37) }
        # (Line 38) if(race == 2)
    EUDEndIf()
    if EUDIf()(race == 2):
        # (Line 39) {//terran
        # (Line 40) suppliesUsed = dwread_epd(EPD(TSuppliesUsed) + playerID);
        suppliesUsed << (f_dwread_epd(EPD(TSuppliesUsed) + playerID))
        # (Line 41) suppliesAvail = dwread_epd(EPD(TSuppliesAvailable) + playerID);
        suppliesAvail << (f_dwread_epd(EPD(TSuppliesAvailable) + playerID))
        # (Line 42) }
        # (Line 43) if(race == 3)
    EUDEndIf()
    if EUDIf()(race == 3):
        # (Line 44) {//protoss
        # (Line 45) suppliesUsed = dwread_epd(EPD(PSuppliesUsed) + playerID);
        suppliesUsed << (f_dwread_epd(EPD(PSuppliesUsed) + playerID))
        # (Line 46) suppliesAvail = dwread_epd(EPD(PSuppliesAvailable) + playerID);
        suppliesAvail << (f_dwread_epd(EPD(PSuppliesAvailable) + playerID))
        # (Line 47) }
        # (Line 48) return suppliesUsed, suppliesAvail;
    EUDEndIf()
    EUDReturn(suppliesUsed, suppliesAvail)
    # (Line 49) }
    # (Line 52) function GetSharedSupplies(teamID)

# (Line 53) {// 인구 연동
@EUDFunc
def GetSharedSupplies(teamID):
    # (Line 54) const team = shareTeam.GetSharedTeam(teamID);
    team = shareTeam.GetSharedTeam(teamID)
    # (Line 56) var totalSuppliesUsed = 0;
    totalSuppliesUsed = EUDVariable()
    totalSuppliesUsed << (0)
    # (Line 57) var totalsuppliesAvail = 0;
    totalsuppliesAvail = EUDVariable()
    totalsuppliesAvail << (0)
    # (Line 58) var playerNumber = 0;
    playerNumber = EUDVariable()
    playerNumber << (0)
    # (Line 60) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 61) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 62) if(shareTeam.IsTeammate(p, teamID))
    if EUDIf()(shareTeam.IsTeammate(p, teamID)):
        # (Line 63) {
        # (Line 64) const u, m = GetSupplies(p, team.race);
        u, m = List2Assignable([GetSupplies(p, team.race)])
        # (Line 65) totalSuppliesUsed += u;
        totalSuppliesUsed.__iadd__(u)
        # (Line 66) totalsuppliesAvail  += m;
        totalsuppliesAvail.__iadd__(m)
        # (Line 67) playerNumber++;
        playerNumber.__iadd__(1)
        # (Line 68) }
        # (Line 69) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 71) const pastSuppliesUsed = team.suppliesUsed;
    pastSuppliesUsed = team.suppliesUsed
    # (Line 72) const pastsuppliesAvail = team.suppliesAvail;
    pastsuppliesAvail = team.suppliesAvail
    # (Line 74) const sharedSuppliesUsed = totalSuppliesUsed - (playerNumber -1) * pastSuppliesUsed;
    sharedSuppliesUsed = totalSuppliesUsed - (playerNumber - 1) * pastSuppliesUsed
    # (Line 75) const sharedsuppliesAvail = totalsuppliesAvail  - (playerNumber -1) * pastsuppliesAvail;
    sharedsuppliesAvail = totalsuppliesAvail - (playerNumber - 1) * pastsuppliesAvail
    # (Line 76) var b = 0;
    b = EUDVariable()
    b << (0)
    # (Line 78) return sharedSuppliesUsed, sharedsuppliesAvail;
    EUDReturn(sharedSuppliesUsed, sharedsuppliesAvail)
    # (Line 79) }
    # (Line 81) function SetSupplies(playerID, race, suppliesUsed, suppliesAvail)

# (Line 82) {
@EUDFunc
def SetSupplies(playerID, race, suppliesUsed, suppliesAvail):
    # (Line 83) if(race == 1)
    if EUDIf()(race == 1):
        # (Line 84) {//zerg
        # (Line 85) SetMemoryEPD(EPD(ZSuppliesUsed) + playerID, SetTo, suppliesUsed);
        DoActions(SetMemoryEPD(EPD(ZSuppliesUsed) + playerID, SetTo, suppliesUsed))
        # (Line 86) SetMemoryEPD(EPD(ZSuppliesAvailable) + playerID, SetTo, suppliesAvail);
        DoActions(SetMemoryEPD(EPD(ZSuppliesAvailable) + playerID, SetTo, suppliesAvail))
        # (Line 87) }
        # (Line 88) if(race == 2)
    EUDEndIf()
    if EUDIf()(race == 2):
        # (Line 89) {//terran
        # (Line 90) SetMemoryEPD(EPD(TSuppliesUsed) + playerID, SetTo, suppliesUsed);
        DoActions(SetMemoryEPD(EPD(TSuppliesUsed) + playerID, SetTo, suppliesUsed))
        # (Line 91) SetMemoryEPD(EPD(TSuppliesAvailable) + playerID, SetTo, suppliesAvail);
        DoActions(SetMemoryEPD(EPD(TSuppliesAvailable) + playerID, SetTo, suppliesAvail))
        # (Line 92) }
        # (Line 93) if(race == 3)
    EUDEndIf()
    if EUDIf()(race == 3):
        # (Line 94) {//protoss
        # (Line 95) SetMemoryEPD(EPD(PSuppliesUsed) + playerID, SetTo, suppliesUsed);
        DoActions(SetMemoryEPD(EPD(PSuppliesUsed) + playerID, SetTo, suppliesUsed))
        # (Line 96) SetMemoryEPD(EPD(PSuppliesAvailable) + playerID, SetTo, suppliesAvail);
        DoActions(SetMemoryEPD(EPD(PSuppliesAvailable) + playerID, SetTo, suppliesAvail))
        # (Line 97) }
        # (Line 98) }
    EUDEndIf()
    # (Line 101) function SetSharedSupplies(teamID)

# (Line 102) {
@EUDFunc
def SetSharedSupplies(teamID):
    # (Line 103) const team = shareTeam.GetSharedTeam(teamID);
    team = shareTeam.GetSharedTeam(teamID)
    # (Line 105) const sharedSuppliesUsed, sharedsuppliesAvail = GetSharedSupplies(teamID);
    sharedSuppliesUsed, sharedsuppliesAvail = List2Assignable([GetSharedSupplies(teamID)])
    # (Line 107) team.suppliesUsed = sharedSuppliesUsed;
    _ATTW(team, 'suppliesUsed') << (sharedSuppliesUsed)
    # (Line 108) team.suppliesAvail = sharedsuppliesAvail;
    _ATTW(team, 'suppliesAvail') << (sharedsuppliesAvail)
    # (Line 110) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 111) var p = getcurpl();
    p = EUDVariable()
    p << (f_getcurpl())
    # (Line 113) if(shareTeam.IsTeammate(p, teamID))
    if EUDIf()(shareTeam.IsTeammate(p, teamID)):
        # (Line 114) {
        # (Line 115) SetSupplies(p, team.race, sharedSuppliesUsed, sharedsuppliesAvail);
        SetSupplies(p, team.race, sharedSuppliesUsed, sharedsuppliesAvail)
        # (Line 116) }
        # (Line 117) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 118) }
    # (Line 120) function IsDifferSupplies(playerID, teamID)

# (Line 121) {
@EUDFunc
def IsDifferSupplies(playerID, teamID):
    # (Line 123) const team = shareTeam.GetSharedTeam(teamID);
    team = shareTeam.GetSharedTeam(teamID)
    # (Line 125) if(shareTeam.IsTeammate(playerID, teamID))
    if EUDIf()(shareTeam.IsTeammate(playerID, teamID)):
        # (Line 126) {
        # (Line 127) var pSuppliesUsed, pSuppliesAvail = GetSupplies(playerID, team.race);
        pSuppliesUsed, pSuppliesAvail = _MVAR([GetSupplies(playerID, team.race)])
        # (Line 128) if(team.suppliesUsed != pSuppliesUsed || team.suppliesAvail != pSuppliesAvail)
        if EUDIf()(EUDSCOr()(team.suppliesUsed == pSuppliesUsed, neg=True)(team.suppliesAvail == pSuppliesAvail, neg=True)()):
            # (Line 129) {
            # (Line 130) SetSharedSupplies(teamID);
            SetSharedSupplies(teamID)
            # (Line 131) }
            # (Line 132) }
        EUDEndIf()
        # (Line 133) }
    EUDEndIf()
