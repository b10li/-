## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 17) import shareTeam;
import shareTeam
# (Line 18) import shareResource;
import shareResource
# (Line 19) import shareSupply;
import shareSupply
# (Line 20) import shareUpgrade;
import shareUpgrade
# (Line 21) import shareUnit;
import shareUnit
# (Line 22) import shareTech;
import shareTech
# (Line 24) function meleeTrigger(teamID)
# (Line 25) {
@EUDFunc
def f_meleeTrigger(teamID):
    # (Line 26) const headPlayer = teamID*shareTeam.TeamManNumber;
    headPlayer = teamID * shareTeam.TeamManNumber
    # (Line 28) if(Deaths(headPlayer, Exactly, 0, 215))
    if EUDIf()(Deaths(headPlayer, Exactly, 0, 215)):
        # (Line 29) {
        # (Line 30) SetResources(headPlayer, SetTo, 50, Ore);
        DoActions(SetResources(headPlayer, SetTo, 50, Ore))
        # (Line 31) SetDeaths(headPlayer, SetTo, 1, 215);
        DoActions(SetDeaths(headPlayer, SetTo, 1, 215))
        # (Line 32) }
        # (Line 34) if(Command(headPlayer, Exactly, 0, '(buildings)'))
    EUDEndIf()
    if EUDIf()(Command(headPlayer, Exactly, 0, '(buildings)')):
        # (Line 35) {
        # (Line 36) Defeat();
        DoActions(Defeat())
        # (Line 37) }
        # (Line 39) }
    EUDEndIf()
    # (Line 41) function ShowText()

# (Line 42) {
@EUDFunc
def ShowText():
    # (Line 43) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 44) SetMissionObjectives('\x0610li\x01: 자원, 인구, 업글, 테크 공유 적용됨');
    DoActions(SetMissionObjectives('\x0610li\x01: 자원, 인구, 업글, 테크 공유 적용됨'))
    # (Line 45) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 46) }
    # (Line 49) const UnitID_DeathCounter1	= 205; //leftdoor

UnitID_DeathCounter1 = _CGFW(lambda: [205], 1)[0]
# (Line 50) const UnitID_DeathCounter2	= 206; //door
UnitID_DeathCounter2 = _CGFW(lambda: [206], 1)[0]
# (Line 52) function DeathCount()
# (Line 53) {//timer
@EUDFunc
def DeathCount():
    # (Line 54) if(Deaths($P8, AtLeast, 1, UnitID_DeathCounter1))
    if EUDIf()(Deaths(7, AtLeast, 1, UnitID_DeathCounter1)):
        # (Line 55) SetDeaths($P8, Subtract, 1, UnitID_DeathCounter1);
        DoActions(SetDeaths(7, Subtract, 1, UnitID_DeathCounter1))
        # (Line 57) if(Deaths($P8, AtLeast, 1, UnitID_DeathCounter2))
    EUDEndIf()
    if EUDIf()(Deaths(7, AtLeast, 1, UnitID_DeathCounter2)):
        # (Line 58) SetDeaths($P8, Subtract, 1, UnitID_DeathCounter2);
        DoActions(SetDeaths(7, Subtract, 1, UnitID_DeathCounter2))
        # (Line 60) }
    EUDEndIf()
    # (Line 62) function onPluginStart()

# (Line 63) {
@EUDFunc
def onPluginStart():
    # (Line 64) ShowText();
    ShowText()
    # (Line 67) for(var i=0; i<shareTeam.TeamNumber; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= shareTeam.TeamNumber, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 68) {
        # (Line 69) const teamHead = i*shareTeam.TeamManNumber;
        teamHead = i * shareTeam.TeamManNumber
        # (Line 70) if(Command(teamHead, Exactly, 1, $U('Zerg Hatchery'))){
        if EUDIf()(Command(teamHead, Exactly, 1, EncodeUnit('Zerg Hatchery'))):
            # (Line 71) shareTeam.SetTeam(i, 1);
            shareTeam.SetTeam(i, 1)
            # (Line 72) }
            # (Line 73) if(Command(teamHead, Exactly, 1, $U('Terran Command Center'))){
        EUDEndIf()
        if EUDIf()(Command(teamHead, Exactly, 1, EncodeUnit('Terran Command Center'))):
            # (Line 74) shareTeam.SetTeam(i, 2);
            shareTeam.SetTeam(i, 2)
            # (Line 75) }
            # (Line 76) if(Command(teamHead, Exactly, 1, $U('Protoss Nexus'))){
        EUDEndIf()
        if EUDIf()(Command(teamHead, Exactly, 1, EncodeUnit('Protoss Nexus'))):
            # (Line 77) shareTeam.SetTeam(i, 3);
            shareTeam.SetTeam(i, 3)
            # (Line 78) }
            # (Line 79) }
        EUDEndIf()
        # (Line 80) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 82) function beforeTriggerExec()

# (Line 83) {
@EUDFunc
def beforeTriggerExec():
    # (Line 84) DeathCount();
    DeathCount()
    # (Line 85) for(var iTeam=0; iTeam<shareTeam.TeamNumber; iTeam++)
    iTeam = EUDVariable()
    iTeam << (0)
    if EUDWhile()(iTeam >= shareTeam.TeamNumber, neg=True):
        def _t2():
            iTeam.__iadd__(1)
        # (Line 86) {//team 0~1
        # (Line 88) meleeTrigger(iTeam);
        f_meleeTrigger(iTeam)
        # (Line 89) if(Deaths($P8, Exactly, 0, UnitID_DeathCounter1))
        if EUDIf()(Deaths(7, Exactly, 0, UnitID_DeathCounter1)):
            # (Line 90) {// 1/24 sec
            # (Line 91) for(var p=0; p<6; p++)
            p = EUDVariable()
            p << (0)
            if EUDWhile()(p >= 6, neg=True):
                def _t5():
                    p.__iadd__(1)
                # (Line 92) {//p1~6
                # (Line 93) if(playerexist(p))
                if EUDIf()(f_playerexist(p)):
                    # (Line 94) {
                    # (Line 95) shareResource.IsDifferResource(p, iTeam);	// 팀간 자원공유
                    shareResource.IsDifferResource(p, iTeam)
                    # (Line 96) shareSupply.IsDifferSupplies(p, iTeam);	// 팀간 인구공유
                    shareSupply.IsDifferSupplies(p, iTeam)
                    # (Line 97) shareUnit.GiveSelectedUnit(p);		// 팀간 선택한 유닛주기
                    shareUnit.GiveSelectedUnit(p)
                    # (Line 98) }
                    # (Line 99) }
                EUDEndIf()
                # (Line 100) SetDeaths($P8, SetTo, 2, UnitID_DeathCounter1);
                EUDSetContinuePoint()
                _t5()
            EUDEndWhile()
            DoActions(SetDeaths(7, SetTo, 2, UnitID_DeathCounter1))
            # (Line 101) }
            # (Line 103) if(Deaths($P8, Exactly, 0, UnitID_DeathCounter2))
        EUDEndIf()
        if EUDIf()(Deaths(7, Exactly, 0, UnitID_DeathCounter2)):
            # (Line 104) {// 1 sec
            # (Line 105) shareTech.SetSharedTech(iTeam);			// 팀간 기술공유
            shareTech.SetSharedTech(iTeam)
            # (Line 106) shareUpgrade.SetSharedUpgrade(iTeam);		// 팀간 업글공유
            shareUpgrade.SetSharedUpgrade(iTeam)
            # (Line 107) SetDeaths($P8, SetTo, 48, UnitID_DeathCounter2);
            DoActions(SetDeaths(7, SetTo, 48, UnitID_DeathCounter2))
            # (Line 108) }
            # (Line 109) }
        EUDEndIf()
        # (Line 110) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 112) function afterTriggerExec()

# (Line 113) {
@EUDFunc
def afterTriggerExec():
    # (Line 115) SetMemory(0x6509A0, SetTo, 0);
    DoActions(SetMemory(0x6509A0, SetTo, 0))
    # (Line 116) }
